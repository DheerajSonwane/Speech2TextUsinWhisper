#pragma checksum "C:\Users\hp\Desktop\Projects\Speak2Type\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4e2fe2de0a1dfc7289c411779bdd1a94ffeb99b7"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\hp\Desktop\Projects\Speak2Type\Views\_ViewImports.cshtml"
using Speak2Type;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\hp\Desktop\Projects\Speak2Type\Views\_ViewImports.cshtml"
using Speak2Type.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4e2fe2de0a1dfc7289c411779bdd1a94ffeb99b7", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"5b582cc626e2a2bbda3019d43899747359e4b2ef", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\hp\Desktop\Projects\Speak2Type\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Speak2Type";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n \r\n<!DOCTYPE html>\r\n<html>\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4e2fe2de0a1dfc7289c411779bdd1a94ffeb99b73388", async() => {
                WriteLiteral("\r\n    <title>");
#nullable restore
#line 9 "C:\Users\hp\Desktop\Projects\Speak2Type\Views\Home\Index.cshtml"
      Write(ViewData["Title"]);

#line default
#line hidden
#nullable disable
                WriteLiteral(@"</title>
    <!-- Include your JavaScript code here -->
    <script>
        let mediaRecorder;
        let audioChunks = [];
        let recording = false;

        document.addEventListener('DOMContentLoaded', function () {
            // Function to transcribe speech and populate the specified textbox
            function startSpeechRecognition(textboxId) {
                audioChunks = [];
                navigator.mediaDevices.getUserMedia({ audio: true })
                    .then(function (stream) {
                        mediaRecorder = new MediaRecorder(stream);

                        mediaRecorder.ondataavailable = function (event) {
                            if (event.data.size > 0) {
                                audioChunks.push(event.data);
                            }
                        };

                        mediaRecorder.onstop = function () {
                            //saveRecordedAudio();
                            convertAndTranscribe(textboxId)");
                WriteLiteral(@";
                        };

                        mediaRecorder.start();
                        recording = true;
                    })
                    .catch(function (err) {
                        console.error('Error accessing microphone:', err);
                    });
            }

            $('#name').click(function () {
                startSpeechRecognition('name');
            });

            $('#name').focusout(function () {
                if (recording) {
                    mediaRecorder.stop();
                    recording = false;
                }
            });

            $('#address').click(function () {
                startSpeechRecognition('address');
            });

            $('#address').focusout(function () {
                if (recording) {
                    mediaRecorder.stop();
                    recording = false;
                }
            });

            

            function convertAndTranscribe(textboxId) {
    ");
                WriteLiteral(@"            if (audioChunks.length === 0) {
                    console.error('No audio data to transcribe.');
                    return;
                }

                // Define the data to send (in this case, a FormData object with the audio blob)
                const audioBlob = new Blob(audioChunks, { type: 'audio/wav' });
                const formData = new FormData();
                formData.append('audio', audioBlob);

                // Make the AJAX call to your server-side proxy
                $.ajax({
                    url: '/api/whisper/transcribe', // Replace with the actual URL of your server-side proxy
                    method: 'POST',
                    data: formData,
                    processData: false,
                    contentType: false, 
                    success: function (data) {
                        if(data.text) {
                            const transcribedText = JSON.parse(data.text);
                            document.getElementById(t");
                WriteLiteral(@"extboxId).value = transcribedText.text;
                            $('#errorMessage').text('');
                        } else {
                            console.error('Error transcribing audio.');
                            const errorMessage = document.getElementById('errorMessage');
                            errorMessage.textContent = `Error ${error.status}: ${error.responseText}`;
                        }
                    },
                    error: function (error) {
                        console.error('Error:', error);
                        const errorMessage = document.getElementById('errorMessage');
                        errorMessage.textContent = `Error ${error.status}: ${error.responseText}`;
                    }
                }); 
            }
           
        }); 

        

    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4e2fe2de0a1dfc7289c411779bdd1a94ffeb99b78617", async() => {
                WriteLiteral(@"

    <h2>Speech 2 Text</h2>
     

    <div id=""successMessage"" style=""color: lawngreen;""></div>
    <div id=""errorMessage"" style=""color: red;""></div>

    <input type=""text"" id=""name"" placeholder=""Name"" />
    <input type=""text"" id=""address"" placeholder=""Address"" />
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
